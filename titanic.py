import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import RobustScaler, OrdinalEncoder
from sklearn.feature_extraction.text import CountVectorizer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# T√≠tulo da aplica√ß√£o
st.markdown("<h2 style='color:lightblue;'>Preparados para uma aventura no Titanic?</h2>", unsafe_allow_html=True)
st.write("---")

# Adicionar imagem no topo
st.image("https://png.pngtree.com/png-vector/20240722/ourmid/pngtree-titanic-cruise-ship-sail-in-sea-iceberg-in-night-scene-in-png-image_13038983.png", use_column_width=True)

# Definir o estilo da p√°gina com imagem de fundo
st.markdown(
    """
    <style>
    .stApp {
        background-image: url("https://www.cnnbrasil.com.br/wp-content/uploads/sites/12/2023/06/july9-hires.jpg");
        background-size: cover;
    }
    
    /* Estilo do bal√£o de conversa */
    .chat-bubble {
        padding: 10px;
        border-radius: 10px;
        margin: 5px;
        max-width: 80%;
        color: black;
    }

    .user-bubble {
        background-color: lightblue;
        margin-left: auto;
    }

    .bot-bubble {
        background-color: lightgray;
        margin-right: auto;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Adicionar m√∫sica do arquivo local
st.audio("songtitanic.mp3") 

# Carregar os dados
def carregar_dados():
    treino = pd.read_csv('train.csv')
    teste = pd.read_csv('test.csv')
    return treino, teste

# Preprocessar os dados
def preprocessar_dados(treino, teste):
    treino['Age'] = treino['Age'].fillna(treino['Age'].mean())
    teste['Age'] = teste['Age'].fillna(teste['Age'].mean())
    treino['Embarked'] = treino['Embarked'].fillna(treino['Embarked'].mode()[0])
    teste['Fare'] = teste['Fare'].fillna(teste['Fare'].mean())
    treino['MaleCheck'] = treino['Sex'].apply(lambda x: 1 if x == 'male' else 0)
    teste['MaleCheck'] = teste['Sex'].apply(lambda x: 1 if x == 'male' else 0)
    treino = treino.drop(['Sex', 'Ticket', 'Cabin'], axis=1)
    teste = teste.drop(['Sex', 'Ticket', 'Cabin'], axis=1)
    scaler = RobustScaler()
    treino[['Age', 'Fare']] = scaler.fit_transform(treino[['Age', 'Fare']])
    teste[['Age', 'Fare']] = scaler.transform(teste[['Age', 'Fare']])
    categorias = ['S', 'C', 'Q']
    encoder = OrdinalEncoder(categories=[categorias], dtype='int32')
    treino['Embarked'] = encoder.fit_transform(treino[['Embarked']])
    teste['Embarked'] = encoder.transform(teste[['Embarked']])
    vectorizer = CountVectorizer()
    X_train_nome = vectorizer.fit_transform(treino['Name'])
    X_teste_nome = vectorizer.transform(teste['Name'])
    X = pd.concat([treino.drop(['Name', 'PassengerId', 'Survived'], axis=1), pd.DataFrame(X_train_nome.toarray())], axis=1)
    y = treino['Survived']
    X_teste = pd.concat([teste.drop(['Name', 'PassengerId'], axis=1), pd.DataFrame(X_teste_nome.toarray())], axis=1)
    X.columns = X.columns.astype(str)
    X_teste.columns = X_teste.columns.astype(str)
    return X, y, X_teste

# Treinar modelo
def treinar_modelo(X, y):
    modelos = {
        'Regress√£o Log√≠stica': LogisticRegression(max_iter=1000),
        'Random Forest': RandomForestClassifier(),
        'MLP Classifier (Redes Neurais)': MLPClassifier(max_iter=5000)
    }
    resultados = {}
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=42)
    for nome, modelo in modelos.items():
        modelo.fit(X_train, y_train)
        y_pred = modelo.predict(X_val)
        resultados[nome] = accuracy_score(y_val, y_pred)
    return resultados, modelos

# Fun√ß√£o para prever sobreviv√™ncia
def prever_sobrevivencia(modelos, X_teste, opcao):
    modelo = modelos[opcao]
    y_pred_teste = modelo.predict(X_teste)
    return y_pred_teste, modelo

# Fun√ß√£o do chatbot
def chatbot_responder(pergunta):
    respostas = {
        "navio": "O navio se chama Titanic.",
        "afundou": "O Titanic afundou em 15 de abril de 1912.",
        "passageiros": "Havia cerca de 2.224 passageiros a bordo.",
        "sobreviveram": "Aproximadamente 706 passageiros sobreviveram.",
        "causa": "O Titanic colidiu com um iceberg.",
        "classes": "As classes de passageiros eram 1¬™ classe, 2¬™ classe e 3¬™ classe.",
        "iceberg": "Um iceberg √© um grande bloco de gelo que se desprendeu de uma geleira.",
        "jack e rose": "Jack e Rose s√£o personagens fict√≠cios do filme Titanic.",
        "projeto": "√â um projeto de machine learning que prever a sobreviv√™ncia dos passageiros do Titanic com base em dados dispon√≠veis.",
        "modelos": "Os algoritmos utilizados incluem Regress√£o Log√≠stica, Random Forest e MLP Classifier (Redes Neurais).",
        "dados utilizados": "Os dados utilizados incluem informa√ß√µes sobre idade, g√™nero, classe de cabine, tarifa e outras caracter√≠sticas dos passageiros.",
        "como os dados s√£o pr√©-processados?": "Os dados s√£o limpos, preenchendo valores ausentes, transformando vari√°veis categ√≥ricas e normalizando valores num√©ricos.",
        "acur√°cia": "A acur√°cia √© uma m√©trica que indica a propor√ß√£o de previs√µes corretas em rela√ß√£o ao total de previs√µes feitas.",
        "valida√ß√£o": "A valida√ß√£o √© realizada utilizando a divis√£o dos dados em conjuntos de treinamento e valida√ß√£o, avaliando a performance em dados n√£o vistos.",
        "engenharia de atributos": "A engenharia de atributos √© crucial para melhorar o desempenho do modelo, transformando dados brutos em caracter√≠sticas relevantes.",
        "como prever a sobreviv√™ncia?": "A sobreviv√™ncia √© predita com base nas caracter√≠sticas dos passageiros, utilizando o modelo treinado para fazer previs√µes sobre novos dados.",
        "overfitting": "Overfitting √© quando um modelo se ajusta demais aos dados de treinamento, resultando em baixa performance em dados novos.",
        "medidas": "As m√©tricas utilizadas incluem acur√°cia, precis√£o, recall e F1-score.",
        "Oi": "Ol√°, como posso te ajudar? :)",
        "Precis√£o": "Propor√ß√£o de verdadeiros positivos em rela√ß√£o ao total de positivos previstos. Reflita a capacidade do modelo de evitar falsos positivos."

    }

    # Verificar se a pergunta cont√©m palavras-chave
    for palavra_chave, resposta in respostas.items():
        if palavra_chave in pergunta.lower():
            return resposta

    return "Desculpe, n√£o tenho essa informa√ß√£o."

# Main para rodar o resto do c√≥digo
def main():
    treino, teste = carregar_dados()
    X, y, X_teste = preprocessar_dados(treino, teste)
    resultados, modelos = treinar_modelo(X, y)

    # Sele√ß√£o do modelo
    opcao = st.selectbox("Escolha o modelo para previs√£o:", list(modelos.keys()))

    # Bot√£o para prever e exibir resultados
    if st.button('Prever Sobreviv√™ncia'):
        y_pred_teste, modelo_selecionado = prever_sobrevivencia(modelos, X_teste, opcao)
        teste['Survived'] = y_pred_teste
        
        # Calcular a acur√°cia do modelo selecionado no conjunto de treinamento
        y_train_pred = modelo_selecionado.predict(X)
        acuracia = accuracy_score(y, y_train_pred)

        # Calcular a quantidade total de passageiros, sobreviventes e n√£o sobreviventes
        total_passageiros = teste.shape[0]
        total_sobreviventes = teste['Survived'].sum()
        total_nao_sobreviventes = total_passageiros - total_sobreviventes

        # Exibir informa√ß√µes destacadas com opacidade ajustada
        st.markdown(
            f"""
            <div style="padding: 10px; background-color: preto; border-radius: 5px;">
                <h4 style="margin: 0;">Resultados da previs√£oüîÆ:</h4>
                <p style="margin: 5px 0;">Acur√°cia do modelo '<strong>{opcao}</strong>': {acuracia:.4f}</p>
                <p style="margin: 5px 0;">Total de passageiros: <strong>{total_passageiros}</strong></p>
                <p style="margin: 5px 0;">Total de sobreviventes: <strong>{total_sobreviventes}</strong></p>
                <p style="margin: 5px 0;">Total de n√£o sobreviventes: <strong>{total_nao_sobreviventes}</strong></p>
            </div>
            """,
            unsafe_allow_html=True
        )

        st.write("Previs√µes de Sobreviv√™ncia:")
        st.dataframe(teste[['PassengerId', 'Survived']], width=600, height=400)

        # Criar gr√°fico para visualizar sobreviventes e n√£o sobreviventes
        df_viz = pd.DataFrame({
            'Categoria': ['Sobreviventes', 'N√£o Sobreviventes'],
            'Quantidade': [total_sobreviventes, total_nao_sobreviventes]
        })
        
        # Gr√°fico com efeito de √°gua e t√≠tulo vis√≠vel e centralizado
        fig = px.bar(
            df_viz,
            x='Categoria',
            y='Quantidade',
            color='Categoria',
            title="<b>Sobreviventes vs. N√£o Sobreviventes</b>",
            color_discrete_sequence=["#1E90FF", "Black"],
            opacity=0.85
        )
        fig.update_layout(
            title_x=0.5,
            title_font=dict(size=24, color="white"),
            plot_bgcolor='rgba(173,216,230,0.2)',
            paper_bgcolor='rgba(255,255,255,0)',
            font=dict(size=18)
        )
        st.plotly_chart(fig)

    # Chatbot
    st.markdown("<h3 style='color:lightblue;'>Chatnicüí¨:</h3>", unsafe_allow_html=True)
    st.markdown("<h10 style='color:lightblue;'>ATEN√á√ÉO‚ö†Ô∏è. O chatbot implementado na aplica√ß√£o possui um conjunto limitado de respostas, focando exclusivamente nas informa√ß√µes relacionadas ao projeto sobre o Titanic.</h10>", unsafe_allow_html=True)
    if "chat_active" not in st.session_state:
        st.session_state.chat_active = False
        st.session_state.conversas = []

    # Bot√£o para iniciar o chatbot
    if st.button("Iniciar Chatbot"):
        st.session_state.chat_active = True

    # Bot√£o para encerrar o chatbot
    if st.button("Encerrar Chatbot"):
        st.session_state.chat_active = False
        st.session_state.conversas = []  # Limpar as conversas

    if st.session_state.chat_active:
        pergunta = st.text_input("Voc√™: ")
        if pergunta:
            resposta = chatbot_responder(pergunta)
            st.session_state.conversas.append((pergunta, resposta))

        # Exibir o hist√≥rico de conversas
        for pergunta, resposta in st.session_state.conversas:
            st.markdown(f"<div class='chat-bubble user-bubble'>{pergunta}</div>", unsafe_allow_html=True)
            st.markdown(f"<div class='chat-bubble bot-bubble'>{resposta}</div>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
